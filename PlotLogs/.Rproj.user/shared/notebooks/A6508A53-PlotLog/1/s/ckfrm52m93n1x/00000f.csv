"0","# Define the server side"
"0","#| context: server"
"0","server <- function(input, output,session) {"
"0",""
"0","    #shinyDirChoose(input, 'folder', roots=c(wd='.'), filetypes=c('', 'html, txt'))"
"0","    #observe({"
"0","     #print(input$folder)})"
"0","v <- reactiveValues(doPlot = FALSE,"
"0","                    doRead = FALSE)"
"0",""
"0"," observeEvent(input$read, {"
"0","    v$doRead <- input$read"
"0","  })  "
"0","  observeEvent(input$tabset, {"
"0","    v$doRead <- FALSE"
"0","  })  "
"0","  observeEvent(input$start, {"
"0","    v$doRead <- FALSE"
"0","  })  "
"0","  observeEvent(input$end, {"
"0","    v$doRead <- FALSE"
"0","  })  "
"0","  observeEvent(input$by, {"
"0","    v$doRead <- FALSE"
"0","  })  "
"0","  observeEvent(input$path, {"
"0","    v$doRead <- FALSE"
"0","  })  "
"0","  observeEvent(input$prefix, {"
"0","    v$doRead <- FALSE"
"0","  })  "
"0","  observeEvent(input$postfix, {"
"0","    v$doRead <- FALSE"
"0","  }) "
"0",""
"0",""
"0",""
"0"," observeEvent(input$go, {"
"0","    v$doPlot <- input$go"
"0","  })"
"0",""
"0","  observeEvent(input$tabset, {"
"0","    v$doPlot <- FALSE"
"0","  })  "
"0",""
"0","output$update_info <- renderText({"
"0","  if (v$doRead == FALSE) return()"
"0","    #isolate({"
"0","    #  HM_DATE <- unlist( strsplit(html_text(read_html(x = input$logfile)), '\n'))"
"0","    # filename <- ""test""# basename(input$logfile) "
"0","    print(""Loading, be patient..."")"
"0","    ldata <- compact(lapply(make_date_list(start=input$start, end=input$end,"
"0","                            by=input$by, path=input$path, prefix=input$prefix, "
"0","                            postfix=input$postfix),"
"0","                            get_data) )  "
"0",""
"0","    rows1 <- sapply(ldata, function(x)  nrow(x[[1]]) )"
"0","    rows2 <- sapply(ldata, function(x)  nrow(x[[2]]) )"
"0","    expected <- max(rows1)"
"0","    ldata[rows1 < expected | rows1 < expected] <- NULL"
"0","    compact(ldata)"
"0","    "
"0","    spectral <- as_tibble(sapply(names(ldata[[1]][[1]]), function(x) "
"0","                              rowMeans(sapply(ldata, function(y) y[[1]][[x]]))"
"0","                               ))"
"0","    updateSelectInput(session, ""spnorms"","
"0","           choices = attr( spectral,""names"")) # current selection"
"0",""
"0","    gridpoint <- as_tibble(sapply(names(ldata[[1]][[2]]), function(x) "
"0","                              rowMeans(sapply(ldata, function(y) y[[2]][[x]]))"
"0","                             ))"
"0","    updateSelectInput(session, ""gpnorms"","
"0","           choices = attr( gridpoint,""names"")) # current selection"
"0","     "
"0","     # Save metdata and norms into RDS"
"0","      meta  <- tibble(prefix=input$prefix, postfix=input$postfix, path=input$path, "
"0","                start=input$start, end=input$end, by=input$by)"
"0","     RDS_dir <- ""/ec/res4/scratch/fnm/RadarExp/"""
"0","     filename <- paste( paste(tail(unlist(strsplit(meta$path,""/"")),n=1),meta$prefix,sep=""_""),"
"0","                        paste(meta$start,meta$end,meta$by,sep=""_""),"
"0","                        "".rds"",sep="""")"
"0","     object <- list(meta=meta, gridpoint=gridpoint, spectral=spectral)     "
"0","     names(object) <- c(""meta"", ""gridpoint"", ""spectral"")"
"0","     saveRDS(object, paste(RDS_dir,filename,sep=""""))"
"0","        "
"0","  #})    "
"0","  #print(""Boarding completed"")"
"0",""
"0","  output$plot <- renderPlot({"
"0","    if (v$doPlot == FALSE) return()"
"0","       if (input$tabset == ""Spectral norms"") {"
"0","        specimen <- spectral"
"0","        Y <- input$spnorms"
"0","        linecolour <- ""blue""      "
"0",""
"0","      "
"0",""
"0","      } else if (input$tabset == ""Grid point norms""){"
"0","        specimen <- gridpoint"
"0","        Y <- input$gpnorms"
"0","        linecolour <- ""red"""
"0","      } "
"0","    "
"0","       p <- ggplot() + "
"0","        geom_line(data = specimen, aes(x = NSTEP, y = .data[[Y]]), "
"0","                                       colour = linecolour) +"
"0","        ylab(Y) + "
"0","        ggtitle(paste( input$path,input$prefix,""yyyymmddhh"",input$postfix,""\n"","
"0","                  input$start,""-"",input$end,"" by "",input$by,"" hours"", sep=""""))"
"0","       if (input$showzero ==""yes""){"
"0","          p <- p + expand_limits(x = 0, y = 0)}"
"0","       p"
"0","  }) #RenderPlot"
"0","   print(""Loading completed"")"
"0","} ) #RenderText"
"0","}"
"0","  "
